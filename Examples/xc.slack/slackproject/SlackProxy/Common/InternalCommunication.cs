//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using XComponent.Engine.Processing;
using XComponent.Common.Processing;
using XComponent.Engine.Processing.Domain;
using XComponent.Common.ApiContext;
using XComponent.Communication;

namespace XComponent.SlackProxy.Common
{
    public class InternalCommunication : IInternalCommunication
    {
        private const string ComponentName = "SlackProxy";

		private IAgentManager _agentManager;
        private Dictionary<int, EngineAgent> _engineAgentsById = new Dictionary<int, EngineAgent>();
        private Dictionary<int, List<EngineAgent>> _engineAgentsByStateMachine = new Dictionary<int, List<EngineAgent>>();

        public InternalCommunication(IAgentManager agentManager)
        {
            _agentManager = agentManager;
        }
		
        public void Init(string configFile)
        {
			foreach( var engineAgent in _agentManager.FilterEngineAgentForInternalAPI(777714140))
			{
				_engineAgentsById.Add(engineAgent.Id, engineAgent);
				
				foreach( var detail in Agent.getAgentDetails(engineAgent))
				{
					if (detail.Key.Equals(777714140))
					{
						foreach( var stateMachineCode in detail.Value )
						{
							if(!_engineAgentsByStateMachine.ContainsKey(stateMachineCode))
							{
								_engineAgentsByStateMachine.Add(stateMachineCode, new List<EngineAgent>());
							}

							_engineAgentsByStateMachine[stateMachineCode].Add(engineAgent);
						}
					}
				}
			}
        }

		public void Send(Context context, XComponent.Common.Event.DefaultEvent evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.Common.Event.DefaultEvent(), IncomingEventType.Transition, HeaderFactory.Create(context, 6, privateTopic));
            Agent.Post(_engineAgentsById[context.AgentId], incomingEvent);
        }
        
		public void SendEvent(XComponent.Common.Event.DefaultEvent evt, string privateTopic = null)
        {
            SendEvent(StdEnum.SlackProxy, evt != null ? evt : new XComponent.Common.Event.DefaultEvent(), privateTopic);
		}

		public void SendEvent(StdEnum stateMachineEnum, XComponent.Common.Event.DefaultEvent evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.Common.Event.DefaultEvent(), IncomingEventType.Transition, HeaderFactory.Create(6, (int)stateMachineEnum, 777714140, privateTopic));
			PostOnStateMachine(incomingEvent, stateMachineEnum);
        }

		public void Send(Context context, XComponent.SlackProxy.UserObject.SendMessage evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.SlackProxy.UserObject.SendMessage(), IncomingEventType.Transition, HeaderFactory.Create(context, 10, privateTopic));
            Agent.Post(_engineAgentsById[context.AgentId], incomingEvent);
        }
        
		public void SendEvent(XComponent.SlackProxy.UserObject.SendMessage evt, string privateTopic = null)
        {
            SendEvent(StdEnum.SlackProxy, evt != null ? evt : new XComponent.SlackProxy.UserObject.SendMessage(), privateTopic);
		}

		public void SendEvent(StdEnum stateMachineEnum, XComponent.SlackProxy.UserObject.SendMessage evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.SlackProxy.UserObject.SendMessage(), IncomingEventType.Transition, HeaderFactory.Create(10, (int)stateMachineEnum, 777714140, privateTopic));
			PostOnStateMachine(incomingEvent, stateMachineEnum);
        }

		public void Send(Context context, XComponent.SlackProxy.UserObject.Success evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.SlackProxy.UserObject.Success(), IncomingEventType.Transition, HeaderFactory.Create(context, 11, privateTopic));
            Agent.Post(_engineAgentsById[context.AgentId], incomingEvent);
        }
        
		public void SendEvent(XComponent.SlackProxy.UserObject.Success evt, string privateTopic = null)
        {
            SendEvent(StdEnum.PublishMessage, evt != null ? evt : new XComponent.SlackProxy.UserObject.Success(), privateTopic);
		}

		public void SendEvent(StdEnum stateMachineEnum, XComponent.SlackProxy.UserObject.Success evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.SlackProxy.UserObject.Success(), IncomingEventType.Transition, HeaderFactory.Create(11, (int)stateMachineEnum, 777714140, privateTopic));
			PostOnStateMachine(incomingEvent, stateMachineEnum);
        }

		public void Send(Context context, XComponent.SlackProxy.UserObject.Error evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.SlackProxy.UserObject.Error(), IncomingEventType.Transition, HeaderFactory.Create(context, 8, privateTopic));
            Agent.Post(_engineAgentsById[context.AgentId], incomingEvent);
        }
        
		public void SendEvent(XComponent.SlackProxy.UserObject.Error evt, string privateTopic = null)
        {
            SendEvent(StdEnum.PublishMessage, evt != null ? evt : new XComponent.SlackProxy.UserObject.Error(), privateTopic);
		}

		public void SendEvent(StdEnum stateMachineEnum, XComponent.SlackProxy.UserObject.Error evt, string privateTopic = null)
        {
            var incomingEvent = new IncomingEvent(evt != null ? evt : new XComponent.SlackProxy.UserObject.Error(), IncomingEventType.Transition, HeaderFactory.Create(8, (int)stateMachineEnum, 777714140, privateTopic));
			PostOnStateMachine(incomingEvent, stateMachineEnum);
        }

		private void PostOnStateMachine(IncomingEvent incomingEvent, StdEnum stateMachineEnum)
		{
			foreach(var engineAgent in GetEngineAgents(stateMachineEnum))
			{
				Agent.Post(engineAgent, incomingEvent);
			}
		}

		private IEnumerable<EngineAgent> GetEngineAgents(StdEnum stateMachineEnum)
        {
			switch(stateMachineEnum)
			{
				case StdEnum.SlackProxy :
					return _engineAgentsByStateMachine[777714140];
				case StdEnum.PublishMessage :
					return _engineAgentsByStateMachine[1700109408];
			}

            return new List<EngineAgent>();
        }
    }
}
