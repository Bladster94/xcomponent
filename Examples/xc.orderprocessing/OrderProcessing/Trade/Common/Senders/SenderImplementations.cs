//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using XComponent.Common.ApiContext;
using XComponent.Trade.Common;

namespace XComponent.Trade.Common.Senders
{
    public class ProcessOrderCreationOrderCreationOnUpTradeProcessorSender : AbstractSender, IProcessOrderCreationOrderCreationOnUpTradeProcessorSenderInterface
    {
		public void CreateTrade(Context context, string privateTopic = null)
		{
			_internalAPI.CreateTrade(context, privateTopic);
		}

		public void ExecuteTrade(Context context)
		{
			_internalAPI.ExecuteTrade(context, null);
		}

		public void Execute(Context context)
		{
			_internalAPI.Execute(context, null);
		}


		public void CreateTrade(Context context, XComponent.Trade.UserObject.Trade transitionEvent, string privateTopic = null)
		{
			_internalAPI.CreateTrade(context, transitionEvent, privateTopic);
		}

		public void ExecuteTrade(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent, string privateTopic = null)
		{
			_internalAPI.ExecuteTrade(context, transitionEvent, privateTopic);
		}

		public void Execute(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent, string privateTopic = null)
		{
			_internalAPI.Execute(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.Trade.UserObject.Trade evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(evt, privateTopic);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.Trade evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(stdEnum, evt, privateTopic);
		}

		public void SendEvent(XComponent.Trade.UserObject.TradeExecution evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.TradeExecution evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

    }

    public class ExecuteTradeTradeExecutionOnUpTradeProcessorSender : AbstractSender, IExecuteTradeTradeExecutionOnUpTradeProcessorSenderInterface
    {
		public void CreateTrade(Context context, string privateTopic = null)
		{
			_internalAPI.CreateTrade(context, privateTopic);
		}

		public void ExecuteTrade(Context context)
		{
			_internalAPI.ExecuteTrade(context, null);
		}

		public void Execute(Context context)
		{
			_internalAPI.Execute(context, null);
		}


		public void CreateTrade(Context context, XComponent.Trade.UserObject.Trade transitionEvent, string privateTopic = null)
		{
			_internalAPI.CreateTrade(context, transitionEvent, privateTopic);
		}

		public void ExecuteTrade(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent, string privateTopic = null)
		{
			_internalAPI.ExecuteTrade(context, transitionEvent, privateTopic);
		}

		public void Execute(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent, string privateTopic = null)
		{
			_internalAPI.Execute(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.Trade.UserObject.Trade evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(evt, privateTopic);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.Trade evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(stdEnum, evt, privateTopic);
		}

		public void SendEvent(XComponent.Trade.UserObject.TradeExecution evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.TradeExecution evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

    }

    public class ProcessOrderExecutionOrderExecutionOnUpTradeProcessorSender : AbstractSender, IProcessOrderExecutionOrderExecutionOnUpTradeProcessorSenderInterface
    {
		public void CreateTrade(Context context, string privateTopic = null)
		{
			_internalAPI.CreateTrade(context, privateTopic);
		}

		public void ExecuteTrade(Context context)
		{
			_internalAPI.ExecuteTrade(context, null);
		}

		public void Execute(Context context)
		{
			_internalAPI.Execute(context, null);
		}


		public void CreateTrade(Context context, XComponent.Trade.UserObject.Trade transitionEvent, string privateTopic = null)
		{
			_internalAPI.CreateTrade(context, transitionEvent, privateTopic);
		}

		public void ExecuteTrade(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent, string privateTopic = null)
		{
			_internalAPI.ExecuteTrade(context, transitionEvent, privateTopic);
		}

		public void Execute(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent, string privateTopic = null)
		{
			_internalAPI.Execute(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.Trade.UserObject.Trade evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(evt, privateTopic);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.Trade evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(stdEnum, evt, privateTopic);
		}

		public void SendEvent(XComponent.Trade.UserObject.TradeExecution evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.TradeExecution evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

    }

    public class ExecuteTradeExecutionOnExecutedTradeSender : AbstractSender, IExecuteTradeExecutionOnExecutedTradeSenderInterface
    {


    }

    public class CreateTradeTradeOnWaitingForExecutionTradeSender : AbstractSender, ICreateTradeTradeOnWaitingForExecutionTradeSenderInterface
    {


    }

}