//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace XComponent.Trade.Common.Senders
{
    using System;
    using XComponent.Common.ApiContext;
    using XComponent.Trade.Common;

	public class ProcessOrderCreationOrderCreationOnUpTradeProcessorSender : AbstractSender, IProcessOrderCreationOrderCreationOnUpTradeProcessorSenderInterface
    {
		public void CreateTrade(Context context)
			{
				internalAPI.CreateTrade(context);
			}
		public void ExecuteTrade(Context context)
			{
				internalAPI.ExecuteTrade(context);
			}
		public void Execute(Context context)
			{
				internalAPI.Execute(context);
			}
		
		
		public void CreateTrade(Context context, XComponent.Trade.UserObject.Trade transitionEvent)
			{
				internalAPI.CreateTrade(context, transitionEvent);
			}
		public void ExecuteTrade(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent)
			{
				internalAPI.ExecuteTrade(context, transitionEvent);
			}
		public void Execute(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent)
			{
				internalAPI.Execute(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.Trade.UserObject.Trade evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.Trade evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		public void SendEvent(XComponent.Trade.UserObject.TradeExecution evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.TradeExecution evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class ExecuteTradeTradeExecutionOnUpTradeProcessorSender : AbstractSender, IExecuteTradeTradeExecutionOnUpTradeProcessorSenderInterface
    {
		public void CreateTrade(Context context)
			{
				internalAPI.CreateTrade(context);
			}
		public void ExecuteTrade(Context context)
			{
				internalAPI.ExecuteTrade(context);
			}
		public void Execute(Context context)
			{
				internalAPI.Execute(context);
			}
		
		
		public void CreateTrade(Context context, XComponent.Trade.UserObject.Trade transitionEvent)
			{
				internalAPI.CreateTrade(context, transitionEvent);
			}
		public void ExecuteTrade(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent)
			{
				internalAPI.ExecuteTrade(context, transitionEvent);
			}
		public void Execute(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent)
			{
				internalAPI.Execute(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.Trade.UserObject.Trade evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.Trade evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		public void SendEvent(XComponent.Trade.UserObject.TradeExecution evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.TradeExecution evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class ProcessOrderExecutionOrderExecutionOnUpTradeProcessorSender : AbstractSender, IProcessOrderExecutionOrderExecutionOnUpTradeProcessorSenderInterface
    {
		public void CreateTrade(Context context)
			{
				internalAPI.CreateTrade(context);
			}
		public void ExecuteTrade(Context context)
			{
				internalAPI.ExecuteTrade(context);
			}
		public void Execute(Context context)
			{
				internalAPI.Execute(context);
			}
		
		
		public void CreateTrade(Context context, XComponent.Trade.UserObject.Trade transitionEvent)
			{
				internalAPI.CreateTrade(context, transitionEvent);
			}
		public void ExecuteTrade(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent)
			{
				internalAPI.ExecuteTrade(context, transitionEvent);
			}
		public void Execute(Context context, XComponent.Trade.UserObject.TradeExecution transitionEvent)
			{
				internalAPI.Execute(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.Trade.UserObject.Trade evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.Trade evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		public void SendEvent(XComponent.Trade.UserObject.TradeExecution evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Trade.UserObject.TradeExecution evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class ExecuteTradeExecutionOnExecutedTradeSender : AbstractSender, IExecuteTradeExecutionOnExecutedTradeSenderInterface
    {
		
		
		
		
		
    }
	public class CreateTradeTradeOnWaitingForExecutionTradeSender : AbstractSender, ICreateTradeTradeOnWaitingForExecutionTradeSenderInterface
    {
		
		
		
		
		
    }
	
}
