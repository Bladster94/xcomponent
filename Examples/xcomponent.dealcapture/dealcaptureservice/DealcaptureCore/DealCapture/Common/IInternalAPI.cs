//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace XComponent.DealCapture.Common
{
    using System;
    using XComponent.Common.ApiContext;
    using Microsoft.FSharp.Collections;
    using Microsoft.FSharp.Core;
    
    
    public interface IInternalAPI
    {
		void NewTransaction(Context context);
			
		void ValidationError(Context context);
			
		void InitMapping(Context context);
			
		void Reject(Context context);
			
		void UpdateAndRetry(Context context);
			
		void TimeOut(Context context);
			
		void Error(Context context);
			
		void Accepted(Context context);
			
		void GetInstrumentSnapshot(Context context);
			
		void InstrumentSnapshot(Context context);
			
		void ReferentialUpdated(Context context);
			
		void UpdateReferential(Context context);
			
		
		
		void NewTransaction(Context context, XComponent.DealCapture.UserObject.Transaction transitionEvent);
			
		void ValidationError(Context context, XComponent.DealCapture.UserObject.Error transitionEvent);
			
		void InitMapping(Context context, XComponent.DealCapture.UserObject.Init transitionEvent);
			
		void Reject(Context context, XComponent.DealCapture.UserObject.Reject transitionEvent);
			
		void UpdateAndRetry(Context context, XComponent.DealCapture.UserObject.UpdateAndRetry transitionEvent);
			
		void TimeOut(Context context, XComponent.Common.Event.DefaultEvent transitionEvent);
			
		void Error(Context context, XComponent.DealCapture.UserObject.Error transitionEvent);
			
		void Accepted(Context context, XComponent.DealCapture.UserObject.Accept transitionEvent);
			
		void GetInstrumentSnapshot(Context context, XComponent.Referential.UserObject.GetSnapshot transitionEvent);
			
		void InstrumentSnapshot(Context context, XComponent.Referential.UserObject.InstrumentSnapshot transitionEvent);
			
		void ReferentialUpdated(Context context, XComponent.Referential.UserObject.InstrumentSnapshot transitionEvent);
			
		void UpdateReferential(Context context, XComponent.Referential.UserObject.Instrument transitionEvent);
			
		
		
		void SendEvent(XComponent.DealCapture.UserObject.Transaction evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.DealCapture.UserObject.Transaction evt);
			
		void SendEvent(XComponent.DealCapture.UserObject.Error evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.DealCapture.UserObject.Error evt);
			
		void SendEvent(XComponent.DealCapture.UserObject.Init evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.DealCapture.UserObject.Init evt);
			
		void SendEvent(XComponent.DealCapture.UserObject.Reject evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.DealCapture.UserObject.Reject evt);
			
		void SendEvent(XComponent.DealCapture.UserObject.UpdateAndRetry evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.DealCapture.UserObject.UpdateAndRetry evt);
			
		void SendEvent(XComponent.DealCapture.UserObject.Accept evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.DealCapture.UserObject.Accept evt);
			
		void SendEvent(XComponent.Referential.UserObject.GetSnapshot evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.GetSnapshot evt);
			
		void SendEvent(XComponent.Referential.UserObject.InstrumentSnapshot evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.InstrumentSnapshot evt);
			
		void SendEvent(XComponent.Referential.UserObject.Instrument evt);
			
			void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.Instrument evt);
			
		
    }
}