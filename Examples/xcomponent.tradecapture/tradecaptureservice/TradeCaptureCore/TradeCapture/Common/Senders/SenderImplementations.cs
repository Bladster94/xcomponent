//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace XComponent.TradeCapture.Common.Senders
{
    using System;
    using XComponent.Common.ApiContext;
    using XComponent.TradeCapture.Common;

	public class InitMappingInitOnMappingTransactionSender : AbstractSender, IInitMappingInitOnMappingTransactionSenderInterface
    {
		public void GetInstrumentSnapshot(Context context)
			{
				internalAPI.GetInstrumentSnapshot(context);
			}
		
		
		public void GetInstrumentSnapshot(Context context, XComponent.Referential.UserObject.GetSnapshot transitionEvent)
			{
				internalAPI.GetInstrumentSnapshot(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.Referential.UserObject.GetSnapshot evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.GetSnapshot evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class RejectRejectOnTransactionRejectedTransactionSender : AbstractSender, IRejectRejectOnTransactionRejectedTransactionSenderInterface
    {
		
		
		
		
		
    }
	public class UpdateAndRetryUpdateAndRetryOnValidationTransactionSender : AbstractSender, IUpdateAndRetryUpdateAndRetryOnValidationTransactionSenderInterface
    {
		public void InitMapping(Context context)
			{
				internalAPI.InitMapping(context);
			}
		
		
		public void InitMapping(Context context, XComponent.TradeCapture.UserObject.Init transitionEvent)
			{
				internalAPI.InitMapping(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.TradeCapture.UserObject.Init evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Init evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class TimeOutDefaultEventOnTransactionRejectedTransactionSender : AbstractSender, ITimeOutDefaultEventOnTransactionRejectedTransactionSenderInterface
    {
		
		
		
		
		
    }
	public class ErrorErrorOnErrorOnMappingTransactionSender : AbstractSender, IErrorErrorOnErrorOnMappingTransactionSenderInterface
    {
		public void UpdateReferential(Context context)
			{
				internalAPI.UpdateReferential(context);
			}
		
		
		public void UpdateReferential(Context context, XComponent.Referential.UserObject.Instrument transitionEvent)
			{
				internalAPI.UpdateReferential(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.Referential.UserObject.Instrument evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.Instrument evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class AcceptedAcceptOnTransactionAcceptedTransactionSender : AbstractSender, IAcceptedAcceptOnTransactionAcceptedTransactionSenderInterface
    {
		
		
		
		
		
    }
	public class ReferentialNotificationInstrumentSnapshotOnMappingTransactionSender : AbstractSender, IReferentialNotificationInstrumentSnapshotOnMappingTransactionSenderInterface
    {
		public void Error(Context context)
			{
				internalAPI.Error(context);
			}
		public void Accepted(Context context)
			{
				internalAPI.Accepted(context);
			}
		
		
		public void Error(Context context, XComponent.TradeCapture.UserObject.Error transitionEvent)
			{
				internalAPI.Error(context, transitionEvent);
			}
		public void Accepted(Context context, XComponent.TradeCapture.UserObject.Accept transitionEvent)
			{
				internalAPI.Accepted(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.TradeCapture.UserObject.Error evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Error evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		public void SendEvent(XComponent.TradeCapture.UserObject.Accept evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Accept evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class NewTransactionTransactionOnValidationTransactionSender : AbstractSender, INewTransactionTransactionOnValidationTransactionSenderInterface
    {
		public void ValidationError(Context context)
			{
				internalAPI.ValidationError(context);
			}
		public void InitMapping(Context context)
			{
				internalAPI.InitMapping(context);
			}
		
		
		public void ValidationError(Context context, XComponent.TradeCapture.UserObject.Error transitionEvent)
			{
				internalAPI.ValidationError(context, transitionEvent);
			}
		public void InitMapping(Context context, XComponent.TradeCapture.UserObject.Init transitionEvent)
			{
				internalAPI.InitMapping(context, transitionEvent);
			}
		
		
		public void SendEvent(XComponent.TradeCapture.UserObject.Error evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Error evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		public void SendEvent(XComponent.TradeCapture.UserObject.Init evt)
			{
				internalAPI.SendEvent(evt);
			}
			
			public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Init evt)
			{
				internalAPI.SendEvent(stdEnum, evt);
			}
		
    }
	public class UpdateReferentialInstrumentOnUpdateReferentialUpdateReferentialSender : AbstractSender, IUpdateReferentialInstrumentOnUpdateReferentialUpdateReferentialSenderInterface
    {
		
		
		
		
		
    }
	
}
