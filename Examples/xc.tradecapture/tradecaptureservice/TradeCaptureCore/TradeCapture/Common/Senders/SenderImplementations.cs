//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using XComponent.Common.ApiContext;
using XComponent.TradeCapture.Common;

namespace XComponent.TradeCapture.Common.Senders
{
    public class InitMappingInitOnMappingTransactionSender : AbstractSender, IInitMappingInitOnMappingTransactionSenderInterface
    {
		public void GetInstrumentSnapshot(Context context, string privateTopic = null)
		{
			_internalAPI.GetInstrumentSnapshot(context, privateTopic);
		}


		public void GetInstrumentSnapshot(Context context, XComponent.Referential.UserObject.GetSnapshot transitionEvent, string privateTopic = null)
		{
			_internalAPI.GetInstrumentSnapshot(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.Referential.UserObject.GetSnapshot evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(evt, privateTopic);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.GetSnapshot evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(stdEnum, evt, privateTopic);
		}

    }

    public class RejectRejectOnTransactionRejectedTransactionSender : AbstractSender, IRejectRejectOnTransactionRejectedTransactionSenderInterface
    {


    }

    public class UpdateAndRetryUpdateAndRetryOnValidationTransactionSender : AbstractSender, IUpdateAndRetryUpdateAndRetryOnValidationTransactionSenderInterface
    {
		public void InitMapping(Context context)
		{
			_internalAPI.InitMapping(context, null);
		}


		public void InitMapping(Context context, XComponent.TradeCapture.UserObject.Init transitionEvent, string privateTopic = null)
		{
			_internalAPI.InitMapping(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.TradeCapture.UserObject.Init evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Init evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

    }

    public class TimeOutDefaultEventOnTransactionRejectedTransactionSender : AbstractSender, ITimeOutDefaultEventOnTransactionRejectedTransactionSenderInterface
    {


    }

    public class ErrorErrorOnErrorOnMappingTransactionSender : AbstractSender, IErrorErrorOnErrorOnMappingTransactionSenderInterface
    {
		public void UpdateReferential(Context context, string privateTopic = null)
		{
			_internalAPI.UpdateReferential(context, privateTopic);
		}


		public void UpdateReferential(Context context, XComponent.Referential.UserObject.Instrument transitionEvent, string privateTopic = null)
		{
			_internalAPI.UpdateReferential(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.Referential.UserObject.Instrument evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(evt, privateTopic);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.Instrument evt, string privateTopic = null)
		{
			_internalAPI.SendEvent(stdEnum, evt, privateTopic);
		}

    }

    public class AcceptedAcceptOnTransactionAcceptedTransactionSender : AbstractSender, IAcceptedAcceptOnTransactionAcceptedTransactionSenderInterface
    {


    }

    public class ReferentialNotificationInstrumentSnapshotOnMappingTransactionSender : AbstractSender, IReferentialNotificationInstrumentSnapshotOnMappingTransactionSenderInterface
    {
		public void Error(Context context)
		{
			_internalAPI.Error(context, null);
		}

		public void Accepted(Context context)
		{
			_internalAPI.Accepted(context, null);
		}


		public void Error(Context context, XComponent.TradeCapture.UserObject.Error transitionEvent, string privateTopic = null)
		{
			_internalAPI.Error(context, transitionEvent, privateTopic);
		}

		public void Accepted(Context context, XComponent.TradeCapture.UserObject.Accept transitionEvent, string privateTopic = null)
		{
			_internalAPI.Accepted(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.TradeCapture.UserObject.Error evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Error evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

		public void SendEvent(XComponent.TradeCapture.UserObject.Accept evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Accept evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

    }

    public class NewTransactionTransactionOnValidationTransactionSender : AbstractSender, INewTransactionTransactionOnValidationTransactionSenderInterface
    {
		public void ValidationError(Context context)
		{
			_internalAPI.ValidationError(context, null);
		}

		public void InitMapping(Context context)
		{
			_internalAPI.InitMapping(context, null);
		}


		public void ValidationError(Context context, XComponent.TradeCapture.UserObject.Error transitionEvent, string privateTopic = null)
		{
			_internalAPI.ValidationError(context, transitionEvent, privateTopic);
		}

		public void InitMapping(Context context, XComponent.TradeCapture.UserObject.Init transitionEvent, string privateTopic = null)
		{
			_internalAPI.InitMapping(context, transitionEvent, privateTopic);
		}


		public void SendEvent(XComponent.TradeCapture.UserObject.Error evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Error evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

		public void SendEvent(XComponent.TradeCapture.UserObject.Init evt)
		{
			_internalAPI.SendEvent(evt, null);
		}

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Init evt)
		{
			_internalAPI.SendEvent(stdEnum, evt, null);
		}

    }

    public class UpdateReferentialInstrumentOnUpdateReferentialUpdateReferentialSender : AbstractSender, IUpdateReferentialInstrumentOnUpdateReferentialUpdateReferentialSenderInterface
    {


    }

}