//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using XComponent.Common.ApiContext;
using XComponent.Engine.Processing;
using XComponent.Engine.Processing.Domain;

namespace XComponent.TradeCapture.Common
{
    public class InternalAPI : IInternalAPI
    {
		private IInternalCommunication _internalCommunicationLayer;
        
        public InternalAPI(IAgentManager agentManager)
        {
            _internalCommunicationLayer = new InternalCommunication(agentManager);
        }
        
        public void Init()
        {
            _internalCommunicationLayer.Init("DeploymentConfiguration.xml");
        }
        
        public void Init(string configFile)
        {
            _internalCommunicationLayer.Init(configFile);
        }

		public void NewTransaction(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.TradeCapture.UserObject.Transaction), privateTopic);
        }

		public void ValidationError(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.TradeCapture.UserObject.Error), privateTopic);
        }

		public void InitMapping(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.TradeCapture.UserObject.Init), privateTopic);
        }

		public void Reject(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.TradeCapture.UserObject.Reject), privateTopic);
        }

		public void UpdateAndRetry(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.TradeCapture.UserObject.UpdateAndRetry), privateTopic);
        }

		public void TimeOut(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.Common.Event.DefaultEvent), privateTopic);
        }

		public void Error(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.TradeCapture.UserObject.Error), privateTopic);
        }

		public void Accepted(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.TradeCapture.UserObject.Accept), privateTopic);
        }

		public void GetInstrumentSnapshot(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.Referential.UserObject.GetSnapshot), privateTopic);
        }

		public void ReferentialNotification(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.Referential.UserObject.InstrumentSnapshot), privateTopic);
        }

		public void UpdateReferential(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.Referential.UserObject.Instrument), privateTopic);
        }

		public void NewTransaction(Context context, XComponent.TradeCapture.UserObject.Transaction transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void ValidationError(Context context, XComponent.TradeCapture.UserObject.Error transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void InitMapping(Context context, XComponent.TradeCapture.UserObject.Init transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void Reject(Context context, XComponent.TradeCapture.UserObject.Reject transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void UpdateAndRetry(Context context, XComponent.TradeCapture.UserObject.UpdateAndRetry transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void TimeOut(Context context, XComponent.Common.Event.DefaultEvent transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void Error(Context context, XComponent.TradeCapture.UserObject.Error transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void Accepted(Context context, XComponent.TradeCapture.UserObject.Accept transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void GetInstrumentSnapshot(Context context, XComponent.Referential.UserObject.GetSnapshot transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void ReferentialNotification(Context context, XComponent.Referential.UserObject.InstrumentSnapshot transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void UpdateReferential(Context context, XComponent.Referential.UserObject.Instrument transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void SendEvent(XComponent.TradeCapture.UserObject.Transaction evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.TradeCapture.UserObject.Error evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.TradeCapture.UserObject.Init evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.TradeCapture.UserObject.Reject evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.TradeCapture.UserObject.UpdateAndRetry evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.TradeCapture.UserObject.Accept evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.Referential.UserObject.GetSnapshot evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.Referential.UserObject.InstrumentSnapshot evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.Referential.UserObject.Instrument evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Transaction evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Error evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Init evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Reject evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.UpdateAndRetry evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.TradeCapture.UserObject.Accept evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.GetSnapshot evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.InstrumentSnapshot evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.Instrument evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

    }
}
