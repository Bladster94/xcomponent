//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by XCTools.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using XComponent.Common.ApiContext;
using XComponent.Engine.Processing;
using XComponent.Engine.Processing.Domain;

namespace XComponent.Referential.Common
{
    public class InternalAPI : IInternalAPI
    {
		private IInternalCommunication _internalCommunicationLayer;
        
        public InternalAPI(IAgentManager agentManager)
        {
            _internalCommunicationLayer = new InternalCommunication(agentManager);
        }
        
        public void Init()
        {
            _internalCommunicationLayer.Init("DeploymentConfiguration.xml");
        }
        
        public void Init(string configFile)
        {
            _internalCommunicationLayer.Init(configFile);
        }

		public void Start(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.Common.Event.DefaultEvent), privateTopic);
        }

		public void AddInstrument(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.Referential.UserObject.Instrument), privateTopic);
        }

		public void GetInstrumentSnapshot(Context context, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, default(XComponent.Referential.UserObject.GetSnapshot), privateTopic);
        }

		public void Start(Context context, XComponent.Common.Event.DefaultEvent transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void AddInstrument(Context context, XComponent.Referential.UserObject.Instrument transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void GetInstrumentSnapshot(Context context, XComponent.Referential.UserObject.GetSnapshot transitionEvent, string privateTopic = null)
        {
            _internalCommunicationLayer.Send(context, transitionEvent, privateTopic);
        }

		public void SendEvent(XComponent.Referential.UserObject.Instrument evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(XComponent.Referential.UserObject.GetSnapshot evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.Instrument evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

		public void SendEvent(StdEnum stdEnum, XComponent.Referential.UserObject.GetSnapshot evt, string privateTopic = null)
        {
            _internalCommunicationLayer.SendEvent(stdEnum, evt, privateTopic);
        }

    }
}
